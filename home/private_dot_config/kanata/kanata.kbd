;; Comments are prefixed by double-semicolon. A single semicolon is parsed as the
;; keyboard key. Comments are ignored for the configuration file.
;;
;; This configuration language is Lisp-like. If you're unfamiliar with Lisp,
;; don't be alarmed. The maintainer jtroo is also unfamiliar with Lisp. You
;; don't need to know Lisp in-depth to be able to configure kanata.
;;
;; If you follow along with the examples, you should be fine. Kanata should
;; also hopefully have helpful error messages in case something goes wrong.
;; If you need help, you are welcome to ask.

(defcfg
  #|
  This configuration will process all keys pressed inside of kanata, even if
  they are not mapped in defsrc. This is so that certain actions can activate
  at the right time for certain input sequences. By default, unmapped keys are
  not processed through kanata due to a Windows issue related to AltGr. If you
  use AltGr in your keyboard, you will likely want to follow the simple.kbd
  file while unmapping lctl and ralt from defsrc.
  |#
  process-unmapped-keys yes
  concurrent-tap-hold yes
)

;; Only one defsrc is allowed.
;;
;; defsrc defines the keys that will be intercepted by kanata. The order of the
;; keys matches with deflayer declarations and all deflayer declarations must
;; have the same number of keys as defsrc. Any keys not listed in defsrc will
;; be passed straight to the operating system.
(defsrc
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  caps a    s    d    f    g    h    j    k    l    ;    '    ret
  lsft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)

;; The first layer defined is the layer that will be active by default when
;; kanata starts up. This layer is the standard QWERTY layout except for the
;; backtick/grave key (@grl) which is an alias for a tap-hold key.
(deflayer default
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  grv  1    2    3    4    5    6    7    8    9    0    -    =    bspc
  tab  q    w    e    r    t    y    u    i    o    p    [    ]    \
  @ext a    s    d    f    g    h    j    k    l    ;    '    ret
  @sft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)

;; The dvorak layer remaps the keys to the dvorak layout. In addition there is
;; another tap-hold key: @cap. This key retains caps lock functionality when
;; quickly tapped but is read as left-control when held.
(deflayer extend
  esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
  lrld f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  del
  tab  q    w    @Cpu @Cpd t    y    u    i    o    p    [    ]    \
  @ext a    s    d    f    g    lft  down up   rght ;    '    ret
  @sft z    x    c    v    b    n    m    ,    .    /    rsft
  lctl lmet lalt           spc            ralt rmet rctl
)

;; (deflayer extend
;;   esc  f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12
;;   lrld f1   f2   f3   f4   f5   f6   f7   f8   f9   f10  f11  f12  del
;;   @tab mltp @mau @Cpu @Cpd t    y    @mwl @mwd @mwu @mwr [    ]    \
;;   @ext @mal @mad @mar f    g    lft  down up   rght ;    '    ret
;;   @sft z    x    c    v    b    n    m    ,    .    /    rsft
;;   lctl lmet lalt           spc            ralt rmet rctl
;; )

;; defalias is used to declare a shortcut for a more complicated action to keep
;; the deflayer declarations clean and aligned. The alignment in deflayers is not
;; necessary, but is strongly recommended for ease of understanding visually.
;;
;; Aliases are referred to by `@<alias_name>`.
(defalias
  ;; tap for capslk, hold for lctl
  ext (tap-hold-press 200 200 esc (layer-toggle extend))
  tab (tap-hold-press 200 200 tab lctrl)
  ;; tab (tap-dance 180 (
  ;;   (tap-hold-press 200 200 tab lctrl)
  ;;   (multi lctrl lsft)
  ;; ))
  sft (tap-dance 200 (lsft caps))
  ;; sft (tap-dance 200 (lsft (multi lctrl lsft)))

  Cpu C-pgup
  Cpd C-pgdn

  mwu (mwheel-up 5 20)
  mwd (mwheel-down 5 20)
  mwl (mwheel-left 5 20)
  mwr (mwheel-right 5 20)

  mau (movemouse-accel-up 1 400 1 3)
  mal (movemouse-accel-left 1 400 1 3)
  mad (movemouse-accel-down 1 400 1 3)
  mar (movemouse-accel-right 1 400 1 3)
)

(defchordsv2
  ;; (lalt e)    C-S-tab               65535 first-release  ()
  ;; (lalt r)    C-tab               65535 first-release  ()
  ;; (a s d) (macro h e l l o) 250 first-release ()
  ;; (s d f) (macro b y e)     400 first-release ()
  
)

;; The `lrld` action stands for "live reload". This will re-parse everything
;; except for linux-dev, meaning you cannot live reload and switch keyboard
;; devices.
;;
;; The keys 1 and 2 switch the base layer to qwerty and dvorak respectively.
;;
;; Apart from the layer switching and live reload, all other keys are the
;; underscore _ which means "transparent". Transparent means the base layer
;; behaviour is used when pressing that key.
;; (deflayer layers
;;   _    @qwr @dvk lrld _    _    _    _    _    _    _    _    _    _
;;   _    _    _    _    _    _    _    _    _    _    _    _    _    _
;;   _    _    _    _    _    _    _    _    _    _    _    _    _
;;   _    _    _    _    _    _    _    _    _    _    _    _
;;   _    _    _              _              _    _    _
;; )
